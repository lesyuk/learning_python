"""На вход поступают размеры поля и координаты расположения мин.
На выходе программа будет выводить самое поле, где в каждой клетке будет указано находится там мин, либо
сколько мин находится в соседних клетках, если мин в ней нет

Пример ввода
n m k
5 4 4
n — число строк
m — число столбцов
k — число мин

1 1
2 2
3 2
4 4
Координаторы мин в формате номер строки / номер столбца

Для такого примера будет нарисовано поле:
*21.
3*2.
2*31
112*
..11

* — мина
число — если количество мин в соседних клетках > 0
. — если количество мин в соседлних клетках = 0
"""

# Изначально заполним содержимое матрицы нулями
# Координаты мин заполним значениями -1. Далее явно пробежимся по каждой клетке и для
# Любых других значений посчитаем количество мин в соседних клетках (проверим 8 соседей, будем искать значение -1)


#  Считываем размеры таблицы
n, m, k = (int(i) for i in input().split())
# n — число строк, m — число столбцов (длина строки)
a = [[0 for j in range(m)] for i in range(n)]
# Читаем координаты расположения мин и помещаем мины в таблицу
for i in range(k):
    # Так как координаты мин вводятся начиная с 1, то вычитаем 1 из полученного значения
    row, col = (int(i) - 1 for i in input().split())
    # Заполняем координаты единицей
    a[row][col] = -1
# Переходим к заполнению таблицы
for i in range(n):
    for j in range(m):
        if a[i][j] == 0:
            for di in range(-1, 2):
                for dj in range(-1, 2):
                    ai = i + di
                    aj = j + dj
                    # проверим, то что координата на поле, если да, то проверим что в этой клетке не -1
                    if 0 <= ai < n and 0 <= aj < m and a[ai][aj] == -1:
                        a[i][j] += 1

# Вывод таблицы
for i in range(n):
    for j in range(m):
        if a[i][j] == -1:
            print("*", end='')
        elif a[i][j] == 0:
            print(".", end='')
        else:
            print(a[i][j], end='')
    print()
